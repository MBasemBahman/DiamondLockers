// <auto-generated />
using System;
using DevelopmentDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevelopmentDAL.Migrations
{
    [DbContext(typeof(DevelopmentContext))]
    partial class DevelopmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.DBModels.AuditModels.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.ContactFormModels.ContactForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactForms", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.AdministrationRolePremission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_DashboardAccessLevel")
                        .HasColumnType("int");

                    b.Property<int>("Fk_DashboardAdministrationRole")
                        .HasColumnType("int");

                    b.Property<int>("Fk_DashboardView")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_DashboardAccessLevel");

                    b.HasIndex("Fk_DashboardView");

                    b.HasIndex("Fk_DashboardAdministrationRole", "Fk_DashboardView")
                        .IsUnique();

                    b.ToTable("AdministrationRolePremissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CreateAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("DeleteAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("EditAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("ExportAccess")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ViewAccess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DashboardAccessLevels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAccess = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeleteAccess = true,
                            EditAccess = true,
                            ExportAccess = true,
                            Name = "FullAccess",
                            ViewAccess = true
                        },
                        new
                        {
                            Id = 2,
                            CreateAccess = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeleteAccess = false,
                            EditAccess = true,
                            ExportAccess = true,
                            Name = "DataControl",
                            ViewAccess = true
                        },
                        new
                        {
                            Id = 3,
                            CreateAccess = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeleteAccess = false,
                            EditAccess = false,
                            ExportAccess = false,
                            Name = "Viewer",
                            ViewAccess = true
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevelLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("DashboardAccessLevelLang", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FullAccess"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DataControl"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Viewer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DashboardAdministrationRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRoleLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("DashboardAdministrationRoleLang", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_DashboardAdministrationRole")
                        .HasColumnType("int");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_DashboardAdministrationRole");

                    b.HasIndex("Fk_User")
                        .IsUnique();

                    b.ToTable("DashboardAdministrators", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobTitle = "Developer",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ViewPath")
                        .IsUnique();

                    b.ToTable("DashboardViews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Home",
                            ViewPath = "Home"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User",
                            ViewPath = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAdministrator",
                            ViewPath = "DashboardAdministrator"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAccessLevel",
                            ViewPath = "DashboardAccessLevel"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAdministrationRole",
                            ViewPath = "DashboardAdministrationRole"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardView",
                            ViewPath = "DashboardView"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RefreshToken",
                            ViewPath = "RefreshToken"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserDevice",
                            ViewPath = "UserDevice"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Verification",
                            ViewPath = "Verification"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DBLogs",
                            ViewPath = "DBLogs"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Audit",
                            ViewPath = "Audit"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Category",
                            ViewPath = "Category"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Size",
                            ViewPath = "Size"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Color",
                            ViewPath = "Color"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Product",
                            ViewPath = "Product"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ContactForm",
                            ViewPath = "ContactForm"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Setting",
                            ViewPath = "Setting"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardViewLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("DashboardViewLang", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAdministrator"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAccessLevel"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardAdministrationRole"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardView"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RefreshToken"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserDevice"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Verification"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DBLogs"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Audit"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Category"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Size"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Color"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Product"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ContactForm"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Setting"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.LogModels.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.CategoryLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("CategoryLang", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Colors", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.ColorLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("ColorLang", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sizes", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.SizeLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("SizeLang", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Category")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Product")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Category");

                    b.HasIndex("Fk_Product");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Color")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Product")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Color");

                    b.HasIndex("Fk_Product");

                    b.ToTable("ProductColor", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Fk_Source")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Source")
                        .IsUnique();

                    b.ToTable("ProductLang", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Product")
                        .HasColumnType("int");

                    b.Property<int>("Fk_Size")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Product");

                    b.HasIndex("Fk_Size");

                    b.ToTable("ProductSize", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.SettingModels.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "home",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Home"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "home_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الرئيسية"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "features",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Features"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "features_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الخدمات"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "services",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Services"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "services_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الخصائص"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "about",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "About Us"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "about_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "عن دايموند لوكرز"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "products",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Products"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "products_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "المنتجات"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "contact",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Contact Us"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "contact_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "إتصل بنا"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "culture",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "AR"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "القائمه الرئيسية",
                            Key = "culture_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "EN"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "slogan",
                            Key = "slider",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Your Diamonds are in secured Lockers! "
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "slogan",
                            Key = "slider_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "ألماساتك في خزائن آمنة!"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "footerTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Get in touch"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "footerTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "تواصل معنا"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "footerDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Contact us today. Let us help you better manage your security. "
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "footerDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = " اتصل بنا اليوم. لنساعدك فى تحسين إدارة أماناتك. "
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "emailTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "E-Mail"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "emailTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الإيميل"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "emailVal",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "support@diamondlockers.com"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "addressTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Headquarter"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "addressTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "المقر الرئيسي"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "addressDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Riyadh,\r\nSaudi Arabia "
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "بيانات التواصل",
                            Key = "addressDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "الرياض,\r\nالمملكة العربية السعودية"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formTypeTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Type"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formTypeTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "النوع"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formType1",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Individuals"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formType1_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "أفراد"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formType2",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Companies"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formType2_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "شركات"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formNameTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Name"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formNameTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الاسم"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formNameDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Your Name"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formNameDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "أسمك"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formPhoneTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Phone"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formPhoneTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الهاتف"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formPhoneDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Your phone"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formPhoneDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "رقم الهاتف"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formEmailTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Email"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formEmailTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "البريد الإلكتروني"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formEmailDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Your email"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formEmailDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "البريد الإلكتروني"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formServiceTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Service"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formServiceTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الخدمه"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formService1",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Rent"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formService1_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "إيجار"
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formService2",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Buy"
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formService2_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "شراء"
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formService3",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Enquiry"
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formService3_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "إستفسار"
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formMessageTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Message"
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formMessageTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الرسالة"
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formMessageDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Type your message"
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formMessageDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "اكتب رسالتك"
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formSubmit",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Submit"
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formSubmit_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "إرسال"
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formSuccessMsg",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "The message was sent successfully!"
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formSuccessMsg_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "تم إرسال الرسالة بنجاح!"
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formErrorMsg",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Something is wrong please try again!"
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formErrorMsg_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "هناك خطأ ما يرجى المحاولة مرة أخرى!"
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formIncompleteMsg",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Please complete the form!"
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "formIncompleteMsg_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "يرجى ملء النموذج!"
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "copyright",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Copyright. All Rights Reserved"
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "نموذج التواصل",
                            Key = "copyright_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "حقوق النشر. كل الحقوق محفوظة"
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature1",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "AVAILABILITY"
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature1_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "24 / 7 lockers at your service"
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature1_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الخدمة"
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature1_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "24/7 الخزائن في خدمتك"
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature2",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Non-contact"
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature2_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Intelligent lockers are hygienic and clean"
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature2_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "بدون تلامس "
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature2_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الخزائن الذكية صحية ونظيفة"
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature3",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "COST REDUCTION"
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature3_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Unneeded human presence"
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature3_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "تكلفة أقل "
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature3_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "لا حاجة لوجود موظف إضافي"
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature4",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Safety"
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature4_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Integrated camera surveillance as needed"
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخصائص",
                            Key = "feature4_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الحماية"
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخصائص",
                            Key = "feature4_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "كاميرات مراقبة متكاملة حسب الطلب"
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخدمات",
                            Key = "service1",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Rent or Buy?"
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخدمات",
                            Key = "service1_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Our team will be glad to support you with this decision"
                        },
                        new
                        {
                            Id = 86,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخدمات",
                            Key = "service1_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "إيجار أم شراء؟"
                        },
                        new
                        {
                            Id = 87,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخدمات",
                            Key = "service1_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "سنكون سعداء بمساعدتك على اتخاذ القرار"
                        },
                        new
                        {
                            Id = 88,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخدمات",
                            Key = "service2",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "After Sale Service"
                        },
                        new
                        {
                            Id = 89,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخدمات",
                            Key = "service2_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "- 2 years warranty\r\n- Delivery to your location\r\n- Installation\r\n- Staff training\r\n- Maintenance\r\n- Spare parts "
                        },
                        new
                        {
                            Id = 90,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخدمات",
                            Key = "service2_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "خدمات ما بعد البيع"
                        },
                        new
                        {
                            Id = 91,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخدمات",
                            Key = "service2_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "- ضمان عامين\r\n- توصيل إلى موقعك\r\n- التركيب والتشغيل\r\n- التدريب على طريقة الإستخدام\r\n- الصيانة\r\n- توفير قطع الغيار "
                        },
                        new
                        {
                            Id = 92,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخدمات",
                            Key = "service3",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Guaranteed Safe & Secured"
                        },
                        new
                        {
                            Id = 93,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخدمات",
                            Key = "service3_desc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = " If anything (non-consumable) goes wrong, we will cover your loss"
                        },
                        new
                        {
                            Id = 94,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "الخدمات",
                            Key = "service3_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "أمان وحماية مضمونة"
                        },
                        new
                        {
                            Id = 95,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "تفاصيل الخدمات",
                            Key = "service3_desc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = " في حال حدوث خلل تصنيع, فنحن متكفلون بتعويضك "
                        },
                        new
                        {
                            Id = 96,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Our clients love the customizable feature and colors of their Diamond Lockers"
                        },
                        new
                        {
                            Id = 97,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "يفضل عملاء دايموند لوكرز تخصيص ألوان و خصائص لخزائنهم"
                        },
                        new
                        {
                            Id = 98,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Diamond Lockers allows you to keep reliable cloud-based records with multiple data options. Options include what is stored, who has access, and when to permit access.\r\n\r\nOur facial recognition self-service lockers have large-scale applications.\r\n\r\nBusiness usage includes: "
                        },
                        new
                        {
                            Id = 99,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "تستطيع فى دايموند لوكرز عن طريق عدة اختيارات تخص البيانات أن تحتفظ بالسجلات الموثقة للبيانات فى قاعدة البيانات الالكترونية. وتتمثل الاختبارات فى ما هو الشيئ الذي تم تخزينة, ومن يصل إليه, ومتى يسمح بالوصول إليه.\r\n\r\nإن خزائن الاستخدام الذاتي المدعمة بخاصية بصمة الوجه تتمتع بشريحة كبيرة من المستخدمين.\r\n\r\nعلى سبيل المثال: "
                        },
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem1",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Apartment Buildings"
                        },
                        new
                        {
                            Id = 101,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem1_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الشقق السكنية"
                        },
                        new
                        {
                            Id = 102,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem2",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Airports"
                        },
                        new
                        {
                            Id = 103,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem2_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "المطارات"
                        },
                        new
                        {
                            Id = 104,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem3",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Offices"
                        },
                        new
                        {
                            Id = 105,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem3_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "المكاتب"
                        },
                        new
                        {
                            Id = 106,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem4",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Universities"
                        },
                        new
                        {
                            Id = 107,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem4_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "الجامعات"
                        },
                        new
                        {
                            Id = 108,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem5",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Government Institutions"
                        },
                        new
                        {
                            Id = 109,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem5_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " المؤسسات الخكومية"
                        },
                        new
                        {
                            Id = 110,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem6",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " Supermarkets"
                        },
                        new
                        {
                            Id = 111,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem6_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " السوبر ماركت"
                        },
                        new
                        {
                            Id = 112,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem7",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Shopping Malls"
                        },
                        new
                        {
                            Id = 113,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem7_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "المول"
                        },
                        new
                        {
                            Id = 114,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem8",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " Recreation Centers"
                        },
                        new
                        {
                            Id = 115,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "شرح الخدمات",
                            Key = "ServicesItem8_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " مراكز الترفية"
                        },
                        new
                        {
                            Id = 116,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "aboutDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "Streamlined operations and better access control make Diamond Lockers 1st for intelligent locker storage management in Saudi Arabia. "
                        },
                        new
                        {
                            Id = 117,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "aboutDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "إنسيابية العمليات والتحكم في الاستخدام هو ما يجعل دايموند لوكرز الأولي في إدارة الخزائن الذكية في المملكة العربية السعودية. "
                        },
                        new
                        {
                            Id = 118,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "learnMoreBtn",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Learn More"
                        },
                        new
                        {
                            Id = 119,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "learnMoreBtn_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "للمزيد"
                        },
                        new
                        {
                            Id = 120,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "missionTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Mission"
                        },
                        new
                        {
                            Id = 121,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "missionTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "مهمتنا"
                        },
                        new
                        {
                            Id = 122,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "missionDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "To offer accessible, safe, and efficient state-of-the-art technology without compromising customer service. "
                        },
                        new
                        {
                            Id = 123,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "missionDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " نقدم خزائن تتميز بسهولة الاستخدام والأمان والتقنية التكنولوجية الحديثة. "
                        },
                        new
                        {
                            Id = 124,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "visionTitle",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "Vision"
                        },
                        new
                        {
                            Id = 125,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "visionTitle_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "رؤيتنا"
                        },
                        new
                        {
                            Id = 126,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "visionDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = "To be Saudi Arabia's number-one choice for innovation in intelligent storage locker solutions. "
                        },
                        new
                        {
                            Id = 127,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "visionDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 0,
                            Value = " نكون الاختيار الأول فى المملكة العربية السعودية لحلول الخزائن الذكية."
                        },
                        new
                        {
                            Id = 128,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "aboutLongDesc",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = "\r\n\r\nIf you use traditional storage lockers with keys or passcodes, you may be losing money and putting your business at risk. When you consider the difference between standard and intelligent locker management, you will quickly understand how making the change can affect your bottom line.\r\n\r\nManual storage lockers are inefficient, costly, and unsanitary. Forgotten passcodes, labor costs, and misplaced keys are ongoing issues faced by companies still using manual storage methods.\r\n\r\nWelcome to Diamond Lockers, a password-free quick storage solution transforming the locker storage industry.\r\n\r\nWith traditional locker management, employees use passcodes, keys or badges, while tracking records help ensure security and safety. Keeping accurate records, preventing theft, and maintaining hygiene are ongoing challenges faced by companies using manual storage.\r\n\r\nIf you want to increase your company`s productivity and growth consider upgrading your system to Diamond Lockers.\r\n"
                        },
                        new
                        {
                            Id = 129,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "عن الشركة",
                            Key = "aboutLongDesc_lang",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0,
                            Type = 2,
                            Value = " \r\n\r\nهل سبق وفقدت مفتاح الخزنة التقليدية التي تستخدمها؟ أو كنت لا تتذكر كلمة المرور الخاصة بها؟ الأمر الذي يفقدك أموالك ومقتنياتك وقد يعرض عملك للخسارة!! عندما تستخدم الخزنة الذكية ستدرك الفرق الكبير بينها وبين الخزنة التقليدية والذي سيحدث فارق كبير فى حياتك.\r\n\r\nمن المشاكل التي تواجه مستخدمي الخزنة التقليدية أنها عديمة الكفاءة, ومكلفة, وغير عملية, فنسيان كلمة المرور, وتكلفة الاستخدام الباهظة, وفقدان المفتاح, جميعها أمور تعاني منها المؤسسات التي مازالت تستخدم الخزنة التقليدية.\r\n\r\nوالحل يكمن في الخزائن الذكية التي تعمل بدون مدخلات الحماية التقليدية وانما بالأساليب التكنولوجية الحديثة. والتي ستجدها هنا فى دايموند لوكرز.\r\n\r\nفعندما تستخدم الخزنة التقليدية فإنك تحتاج إلي أن يكون معك كلمة المرور أو المفتاح. فى حين أن وجود سجلات استخدام الكترونية تساعد فى تعزيز عنصري الأمان والحماية. فالاحتفاظ بسجلات الكترونية دقيقة يمنع السرقات ويقلل التلامس ونشر العدوى.\r\n\r\nاذا أردت زيادة إنتاجية ونمو شركتك, فعليك تطوير نظام الخزائن لديك إلي نظام خزائن دايموند لوكرز.\r\n"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("NotificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_User");

                    b.HasIndex("NotificationToken")
                        .IsUnique();

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_User");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "user@mail.com",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Developer",
                            Password = "$2a$11$dUgHcIX4/hyN/UPh/D4OqOK/AOUOfSBHi4XxvWvdxSPis90hNI2Y.",
                            UserName = "Developer"
                        });
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_User")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Fk_User");

                    b.ToTable("Verifications", (string)null);
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.AdministrationRolePremission", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", "DashboardAccessLevel")
                        .WithMany("Premissions")
                        .HasForeignKey("Fk_DashboardAccessLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", "DashboardAdministrationRole")
                        .WithMany("Premissions")
                        .HasForeignKey("Fk_DashboardAdministrationRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardView", "DashboardView")
                        .WithMany("Premissions")
                        .HasForeignKey("Fk_DashboardView")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardAccessLevel");

                    b.Navigation("DashboardAdministrationRole");

                    b.Navigation("DashboardView");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevelLang", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", "Source")
                        .WithOne("DashboardAccessLevelLang")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevelLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRoleLang", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", "Source")
                        .WithOne("DashboardAdministrationRoleLang")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRoleLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrator", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", "DashboardAdministrationRole")
                        .WithMany("Administrators")
                        .HasForeignKey("Fk_DashboardAdministrationRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithOne("DashboardAdministrator")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrator", "Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardAdministrationRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardViewLang", b =>
                {
                    b.HasOne("Entities.DBModels.DashboardAdministrationModels.DashboardView", "Source")
                        .WithOne("DashboardViewLang")
                        .HasForeignKey("Entities.DBModels.DashboardAdministrationModels.DashboardViewLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.CategoryLang", b =>
                {
                    b.HasOne("Entities.DBModels.MainDataModels.Category", "Source")
                        .WithOne("CategoryLang")
                        .HasForeignKey("Entities.DBModels.MainDataModels.CategoryLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.ColorLang", b =>
                {
                    b.HasOne("Entities.DBModels.MainDataModels.Color", "Source")
                        .WithOne("ColorLang")
                        .HasForeignKey("Entities.DBModels.MainDataModels.ColorLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.SizeLang", b =>
                {
                    b.HasOne("Entities.DBModels.MainDataModels.Size", "Source")
                        .WithOne("SizeLang")
                        .HasForeignKey("Entities.DBModels.MainDataModels.SizeLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductCategory", b =>
                {
                    b.HasOne("Entities.DBModels.MainDataModels.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("Fk_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.ProductModels.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("Fk_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductColor", b =>
                {
                    b.HasOne("Entities.DBModels.MainDataModels.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("Fk_Color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.ProductModels.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("Fk_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductLang", b =>
                {
                    b.HasOne("Entities.DBModels.ProductModels.Product", "Source")
                        .WithOne("ProductLang")
                        .HasForeignKey("Entities.DBModels.ProductModels.ProductLang", "Fk_Source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.ProductSize", b =>
                {
                    b.HasOne("Entities.DBModels.ProductModels.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("Fk_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DBModels.MainDataModels.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("Fk_Size")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Device", b =>
                {
                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.RefreshToken", b =>
                {
                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.Verification", b =>
                {
                    b.HasOne("Entities.DBModels.UserModels.User", "User")
                        .WithMany("Verifications")
                        .HasForeignKey("Fk_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAccessLevel", b =>
                {
                    b.Navigation("DashboardAccessLevelLang");

                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardAdministrationRole", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("DashboardAdministrationRoleLang");

                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("Entities.DBModels.DashboardAdministrationModels.DashboardView", b =>
                {
                    b.Navigation("DashboardViewLang");

                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.Category", b =>
                {
                    b.Navigation("CategoryLang");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.Color", b =>
                {
                    b.Navigation("ColorLang");

                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("Entities.DBModels.MainDataModels.Size", b =>
                {
                    b.Navigation("ProductSizes");

                    b.Navigation("SizeLang");
                });

            modelBuilder.Entity("Entities.DBModels.ProductModels.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductColors");

                    b.Navigation("ProductLang");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("Entities.DBModels.UserModels.User", b =>
                {
                    b.Navigation("DashboardAdministrator");

                    b.Navigation("Devices");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Verifications");
                });
#pragma warning restore 612, 618
        }
    }
}
